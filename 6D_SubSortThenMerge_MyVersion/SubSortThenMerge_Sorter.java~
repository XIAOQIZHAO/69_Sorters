import java.util.ArrayList;

public class SubSortThenMerge_Sorter {

    ArrayList<String> usersData, localCopy;

    public SubSortThenMerge_Sorter(ArrayList<String> list){
	usersData = list;
	localCopy = new ArrayList<String>(usersData.size());
	if (usersData.size() != 0)
	    for (int i = 0; i < usersData.size(); i++)
		localCopy.add(i, usersData.get(i));
    }

    public String toString() {
        return "" + usersData; 
    }

    
    // public void merge(int start0,
    // 		 int start1,
    // 		 int nItems){
    // 	subSortThenMerge(usersData,
    // 			 start0,
    // 			  start1,
    // 			  start1,
    // 			  nItems);
    // }


    private ArrayList<String> merge(int start,
				      int end){
	return subSort (start,
			(start + end) / 2,
			(start + end) / 2,
			end);
    }
    
    private ArrayList<String> subSort(int start0,
					       int end0,
					       int start1,
					       int end1){
	if (end1 - start0 <= 1)
	    return ;
	else {
	    ArrayList<String> collection0 = subSort(start0,
							    (start0 + end0) / 2,
							    (start0 + end0) / 2,
							    end0);
	    ArrayList<String> collection1 = subSort(start1,
							     (start1 + end1) / 2,
							     (start1 + end1) / 2,
							     end1);

	    for (int i = 0; i < list.size(); i++){
		list.set(i, collection0.get(i));
		list.set(i + end0, collection1.get(i));
	    }
	    Merger m = new Merger(list);
	    return m.merge(start0,
			 collection1.size(),
			 end1);
			 
	}
    }

	// private ArrayList<String> merge(ArrayList<String> list0,
	// 				ArrayList<String> list1){
	//     int counter = 2;
	//     int index0;
	//     int index1;
	//     for (index0 = 0, index1 = 0; counter < list0.size() + list1.size(); counter++){
	// 	if (index0 >= list0.size() && index1 < list1.size())
	// 	    counter = list0.size() + list1.size();
	// 	else if (index1 == list1.size() && index0 < list0.size()
	// 		 || localCopy.get(index0).compareTo( localCopy.get(index1)) <= 0){
	// 	    usersData.set(counter, localCopy.get(index0));
	    
	// 	// System.out.println(usersData.get(index0));
	// 	// System.out.println(usersData.get(index1));
	// 	// System.out.println("counter " + counter);
	// 	// System.out.println("idx0  " + index0);
	// 	// System.out.println("idx1  " + index1);
	// 	    index0++;
	// 	}
	// 	else {
	// 	    usersData.set(counter, localCopy.get(index1));
	    
	// 	// System.out.println(usersData.get(index0));
	// 	// System.out.println(usersData.get(index1));
	// 	// System.out.println("counter " + counter);
	// 	// System.out.println("idx0  " + index0);
	// 	// System.out.println("idx1  " + index1);
	// 	    index1++;
	// 	}
	//     }
	//     return usersData;
	// }
		






	    
	// ArrayList<String> copy = new ArrayList<String>();
    // 	if(start0 == end0 && start1 == end1)
    // 	    return list;
    //     else{
    //         if(start0 == end0)
    // 		list.set( target++, copy.get( start1++));

    // 	    else if( start1 == end1)
    //             list.set( target++, copy.get( start0++));
            
    //         else
    // 		if( copy.get( start0).compareTo( 
    //                 copy.get( start1)) < 0)
    //                 list.set( target++, copy.get(start0++));
    //             else
    //                 list.set( target++, copy.get( start1++));
    // 	return merge( list, target, start0, end0, start1, end1);
    //     }
    // }

    public boolean isSorted(int start0,
			    int nItems){
	for (int i = 0;
	     i < usersData.size() - 1;
	     i++)
	    if (usersData.get(i).compareTo(usersData.get(i + 1)) > 0)
		return false;
	return true;
    }
}
